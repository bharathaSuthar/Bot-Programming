#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

string WhichSideshouldIdraw(string b, string sides, map<string,string> boxes){
    if(boxes[to_string(b[0]-'A'+1)+to_string(b[0]-'1')].size()!=2){
        if(sides.find("R")!=string::npos) return "R";
    }
    if(boxes[to_string(b[0]-'A'-1)+to_string(b[0]-'1')].size()!=2){
        if(sides.find("L")!=string::npos) return "L";
    }
    if(boxes[to_string(b[0]-'A')+to_string(b[0]-'1'+1)].size()!=2){
        if(sides.find("T")!=string::npos) return "T";
    }
    if(boxes[to_string(b[0]-'A')+to_string(b[0]-'1'-1)].size()!=2){
        if(sides.find("B")!=string::npos) return "B";
    }
    return "NONE";
}

int main()
{
    int boardSize; // The size of the board.
    cin >> boardSize; cin.ignore();
    string playerId; // The ID of the player. 'A'=first player, 'B'=second player.
    cin >> playerId; cin.ignore();
    srand(time(0));
    // game loop
    while (1) {
        int playerScore; // The player's score.
        int opponentScore; // The opponent's score.
        cin >> playerScore >> opponentScore; cin.ignore();
        int numBoxes; // The number of playable boxes.
        map<string,string> B1,B2,B3,B4,allB; //boxes with number of sides to draw
        cin >> numBoxes; cin.ignore();
        for (int i = 0; i < numBoxes; i++) {
            string box; // The ID of the playable box.
            string sides; // Playable sides of the box.
            cin >> box >> sides; cin.ignore();
            allB[box]=sides;
            if(sides.size()==1) B1[box]=sides;
            else if(sides.size()==2) B2[box]=sides;
            else if(sides.size()==3) B3[box]=sides;
            else B4[box]=sides;
        }
        if(!B1.empty()){
            auto it=B1.begin();
            cout<<it->first<<" "<<it->second<<endl;
        }
        else{
            string Box;
            string s="NONE";
            if(!B3.empty() && s=="NONE"){
                auto it=B3.begin();
                int count=B3.size();
                while(s=="NONE" && count>0){
                    advance(it,rand()%B3.size());
                    s=WhichSideshouldIdraw(it->first,it->second,allB);
                    count--;
                }
                if(s!="NONE") cout<<it->first<<" "<<s<<endl;
            }
            if(!B4.empty() && s=="NONE"){
                auto it=B4.begin();
                int count=B4.size();
                while(s=="NONE" && count>0){
                    advance(it,rand()%B4.size());
                    s=WhichSideshouldIdraw(it->first,it->second,allB);
                    count--;
                }
                if(s!="NONE") cout<<it->first<<" "<<s<<endl;
            }
            if(!B2.empty()&&s=="NONE"){
                auto it=B2.begin();
                int count=B2.size();
                while(s=="NONE" && count>0){
                    advance(it,rand()%B2.size());
                    s=WhichSideshouldIdraw(it->first,it->second,allB);
                    count--;
                }
                if(s!="NONE") cout<<it->first<<" "<<s<<endl;
            }
            else{
                auto it=allB.begin();
                advance(it,rand()%allB.size());
                cout<<it->first<<" "<<it->second[rand()%it->second.size()]<<endl;
            }
        }
    }
}
